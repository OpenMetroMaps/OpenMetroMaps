wrapper {
    gradleVersion = '7.6.2'
}

allprojects {
    group = pGroup
    version = pVersion
}

subprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'

    repositories {
        maven {
            url 'https://mvn.topobyte.de'
        }
        maven {
            url 'https://mvn.slimjars.com'
        }
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    task allDeps(type: DependencyReportTask) {}
}

subprojects {
    task showInterModuleDependencies {
        doLast {
            println "module '$project.name'"
            project.configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each {
                if (it.id instanceof org.gradle.internal.component.local.model.PublishArtifactLocalArtifactMetadata) {
                    def component = it.id.componentIdentifier
                    if (component instanceof org.gradle.api.internal.artifacts.DefaultProjectComponentIdentifier) {
                        def path = component.projectPath
                        def name = path.substring(path.lastIndexOf(':') + 1)
                        println "     → '$name'"
                    }
                }
            }
        }
    }
}

ext.libraries = [
        project(':openmetromaps-maps-model'),
        project(':openmetromaps-maps-model-xml-desktop'),
        project(':openmetromaps-maps-model-xml-converter'),

        project(':openmetromaps-import-config'),

        project(':openmetromaps-osm'),
        project(':openmetromaps-osm-model'),
        project(':openmetromaps-osm-model-converter'),
        project(':openmetromaps-osm-import'),

        project(':openmetromaps-gtfs-import'),
        project(':openmetromaps-gtfs-model-converter'),

        project(':openmetromaps-maps-awt'),
        project(':openmetromaps-maps-android'),

        project(':openmetromaps-desktop-util'),

        project(':openmetromaps-station-model'),
        project(':openmetromaps-station-model-csv-export'),
        project(':openmetromaps-raw-station-model-xml-desktop'),

        project(':openmetromaps-markdown-view'),
]

ext.allLibraries = [
        project(':openmetromaps-maps-model'),
        project(':openmetromaps-maps-model-util'),
        project(':openmetromaps-maps-model-xml'),
        project(':openmetromaps-maps-model-xml-desktop'),
        project(':openmetromaps-maps-model-xml-converter'),
        project(':openmetromaps-line-network-util'),

        project(':openmetromaps-import-config'),

        project(':openmetromaps-osm'),
        project(':openmetromaps-osm-model'),
        project(':openmetromaps-osm-model-converter'),
        project(':openmetromaps-osm-import'),

        project(':openmetromaps-gtfs-import'),
        project(':openmetromaps-gtfs-model-converter'),

        project(':openmetromaps-maps-core'),
        project(':openmetromaps-maps-awt'),
        project(':openmetromaps-maps-android'),

        project(':openmetromaps-lightgeom'),
        project(':openmetromaps-misc-util'),
        project(':openmetromaps-swing-misc'),
        project(':openmetromaps-heavy-util'),
        project(':openmetromaps-desktop-util'),

        project(':openmetromaps-xml-dom-abstraction'),
        project(':openmetromaps-xml-dom-abstraction-desktop'),

        project(':openmetromaps-station-model'),
        project(':openmetromaps-station-model-csv-export'),
        project(':openmetromaps-raw-station-model'),
        project(':openmetromaps-raw-station-model-xml'),
        project(':openmetromaps-raw-station-model-xml-desktop'),

        project(':openmetromaps-markdown-view'),
]

ext.librariesJava8 = [
        project(':openmetromaps-swing-misc'),
        project(':openmetromaps-heavy-util'),
        project(':openmetromaps-maps-awt'),

        project(':openmetromaps-markdown-view'),
]

task checkUploadArtifactList {
    doLast {
        // build lookup from module name to module
        def map = [:]
        subprojects.each {
            map.put(it.name, it)
        }

        def missing = new HashSet()
        missing.addAll(map.values())

        // build set of modules by looking at dependencies
        def set = new HashSet()
        def queue = new HashSet()

        set.addAll(project.ext.libraries)
        queue.addAll(project.ext.libraries)

        println "Module dependencies:"
        // iterate module queue
        while(!queue.empty) {
            it = queue.iterator().next()
            queue.remove(it)
            println "lib: $it"
            set.add(it)
            it.configurations.runtimeClasspath.resolvedConfiguration.resolvedArtifacts.each {
                if (it.id instanceof org.gradle.internal.component.local.model.PublishArtifactLocalArtifactMetadata) {
                    def component = it.id.componentIdentifier
                    if (component instanceof org.gradle.api.internal.artifacts.DefaultProjectComponentIdentifier) {
                        def path = component.projectPath
                        def name = path.substring(path.lastIndexOf(':') + 1)
                        println "     → '$name'"
                        def dep = map.get(name)
                        if (!set.contains(dep)) {
                            set.add(dep)
                            queue.add(dep)
                        }
                    }
                }
            }
        }

        // convert set of modules to sorted list
        def list = []
        list.addAll(set)
        Collections.sort(list)

        // print all non-configured modules
        println ""
        println "These modules are not configured for upload:"
        missing.removeAll(set)
        def listMissing = []
        listMissing.addAll(missing)
        Collections.sort(listMissing)

        listMissing.each {
            println "$it.name"
        }

        // check list of modules against configured list of libaries
        def someMissing = false
        list.each {
            if (!project.ext.allLibraries.contains(it)) {
                someMissing = true
            }
        }

        if (someMissing) {
            println ""
            println "These modules should be configured for upload:"
            list.each {
                if (!project.ext.allLibraries.contains(it)) {
                    println "$it.name"
                }
            }
            println ""
            println "Add the following lines to your config:"
            list.each {
                if (!project.ext.allLibraries.contains(it)) {
                    println "project(':$it.name'),"
                }
            }
        }

        def pomsMissing = false
        list.each {
            def local = new File(it.projectDir, 'info.pom');
            pomsMissing |= !local.exists()
        }
        if (pomsMissing) {
            println ""
            println "The following modules are configured for upload but do not have an 'info.pom':"
            list.each {
                def local = new File(it.projectDir, 'info.pom');
                if (!local.exists()) {
                    println "$it.name"
                }
            }
        }
    }
}

configure(allLibraries) {
    apply plugin: 'maven-publish'

    def runForArtifactPublication = project.hasProperty("topobyte")

    if (runForArtifactPublication) {
        apply from: 'file:///' + System.getProperty("user.home") \
            + '/.gradle/topobyte.gradle'
    }

    java {
        withSourcesJar()
    }

    def global = new File(rootProject.projectDir, 'info.pom');
    def local = new File(project.projectDir, 'info.pom');

    def pomInfo = new XmlSlurper().parse(global);
    def projName = pomInfo.name
    def projDesc = pomInfo.description
    if (local.exists()) {
        def pomInfoL = new XmlSlurper().parse(local);
        projName = pomInfoL.name
        projDesc = pomInfoL.description
    }

    publishing {
        publications {
            maven(MavenPublication) {
                artifactId = project.name.replaceAll('^openmetromaps', 'omm')
                from components.java
                pom {
                    name = "$projName"
                    description = "$projDesc"
                    url = "$pomInfo.url"
                    licenses {
                        license {
                            name = "$pomInfo.licenseName"
                            url = "$pomInfo.licenseUrl"
                            distribution = "$pomInfo.licenseDistribution"
                        }
                    }
                }
            }
        }
    }
}
